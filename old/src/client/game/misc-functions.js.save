
function addLotsOfBricks(chunk, options = {}) {
  const width = options.width || 32;
  const depth = options.depth || 10;
  const height = options.height || 4;
  const offsets = options.offsets || [0,0,0];
  // width = 32, depth = 10, height = 4, offsets [0,0,0]
  let color;
  let b;
  for (let i = 0; i < width; i++) {
    for (let j = 0; j < depth; j++) {
      for (let k = 0; k < height; k++) {
        if (i >= 0 && i < colors.values.length) {
          color = colors.values[i];
        } else {
          const colorIndex = Math.floor(Math.random() * colors.values.length);
          color = colors.values[colorIndex];
        }
        b = new Brick2({
          width: 1,
          depth: 1,
          height: 3,
          color,
          position: [
            (i * BRICK_WIDTH) - 310 + (offsets[0] * BRICK_WIDTH),
            (k * BRICK_HEIGHT*3) + 0 + (offsets[1] * BRICK_HEIGHT * 3),
            (j * BRICK_WIDTH) - 310 + (offsets[2] * BRICK_WIDTH)
          ] });
        b.name = `(${i},${j},${k})`
        chunk.add(b);
      }
    }
  }
}


// Set the normals so we can see them
function addNormals(bricks, scene) {
  const edges = new THREE.VertexNormalsHelper(bricks, 2, 0xffffff, 1 );
  scene.add(edges);
}



//
// function addInstances() {
//
//   const triangles = 1;
//   const instances = 65000;
//
//   var geometry = new THREE.InstancedBufferGeometry();
//   geometry.maxInstancedCount = instances; // set so its initalized for dat.GUI, will be set in first draw otherwise
//
//   var vertices = new THREE.BufferAttribute( new Float32Array( triangles * 3 * 3 ), 3 );
//   vertices.setXYZ( 0, 20.025, -20.025, 0 );
//   vertices.setXYZ( 1, -20.025, 20.025, 0 );
//   vertices.setXYZ( 2, 0, 0, 20.025 );
//   geometry.addAttribute( 'position', vertices );
//   var offsets = new THREE.InstancedBufferAttribute( new Float32Array( instances * 3 ), 3, 1 );
//   for ( let i = 0, ul = offsets.count; i < ul; i++ ) {
//     offsets.setXYZ( i, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5 );
//   }
//   geometry.addAttribute( 'offset', offsets );
//   var colors = new THREE.InstancedBufferAttribute( new Float32Array( instances * 4 ), 4, 1 );
//   for ( let i = 0, ul = colors.count; i < ul; i++ ) {
//     colors.setXYZW( i, Math.random(), Math.random(), Math.random(), Math.random() );
//   }
//   geometry.addAttribute( 'color', colors );
//   var vector = new THREE.Vector4();
//   var orientationsStart = new THREE.InstancedBufferAttribute( new Float32Array( instances * 4 ), 4, 1 );
//   for ( let i = 0, ul = orientationsStart.count; i < ul; i++ ) {
//     vector.set( Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1 );
//     vector.normalize();
//     orientationsStart.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
//   }
//   geometry.addAttribute( 'orientationStart', orientationsStart );
//   var orientationsEnd = new THREE.InstancedBufferAttribute( new Float32Array( instances * 4 ), 4, 1 );
//   for ( let i = 0, ul = orientationsEnd.count; i < ul; i++ ) {
//     vector.set( Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1 );
//     vector.normalize();
//     orientationsEnd.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
//   }
//   geometry.addAttribute( 'orientationEnd', orientationsEnd );
//   // material
//   var material = new THREE.RawShaderMaterial( {
//     uniforms: {
//       time: { value: 1.0 },
//       sineTime: { value: 1.0 }
//     },
//     vertexShader: document.getElementById( 'vertexShader' ).textContent,
//     fragmentShader: document.getElementById( 'fragmentShader' ).textContent,
//     side: THREE.DoubleSide,
//     transparent: true
//   } );
//   var mesh = new THREE.Mesh( geometry, material );
//   return mesh;
// }
